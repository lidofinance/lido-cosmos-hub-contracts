// This file is generated by rust-protobuf 2.25.2. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `tokenize_share_record.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_25_2;

#[derive(PartialEq,Clone,Default)]
pub struct TokenizeShareRecord {
    // message fields
    pub id: u64,
    pub owner: ::std::string::String,
    pub share_token_denom: ::std::string::String,
    pub module_account: ::std::string::String,
    pub validator: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TokenizeShareRecord {
    fn default() -> &'a TokenizeShareRecord {
        <TokenizeShareRecord as ::protobuf::Message>::default_instance()
    }
}

impl TokenizeShareRecord {
    pub fn new() -> TokenizeShareRecord {
        ::std::default::Default::default()
    }

    // uint64 id = 1;


    pub fn get_id(&self) -> u64 {
        self.id
    }
    pub fn clear_id(&mut self) {
        self.id = 0;
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: u64) {
        self.id = v;
    }

    // string owner = 2;


    pub fn get_owner(&self) -> &str {
        &self.owner
    }
    pub fn clear_owner(&mut self) {
        self.owner.clear();
    }

    // Param is passed by value, moved
    pub fn set_owner(&mut self, v: ::std::string::String) {
        self.owner = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_owner(&mut self) -> &mut ::std::string::String {
        &mut self.owner
    }

    // Take field
    pub fn take_owner(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.owner, ::std::string::String::new())
    }

    // string share_token_denom = 3;


    pub fn get_share_token_denom(&self) -> &str {
        &self.share_token_denom
    }
    pub fn clear_share_token_denom(&mut self) {
        self.share_token_denom.clear();
    }

    // Param is passed by value, moved
    pub fn set_share_token_denom(&mut self, v: ::std::string::String) {
        self.share_token_denom = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_share_token_denom(&mut self) -> &mut ::std::string::String {
        &mut self.share_token_denom
    }

    // Take field
    pub fn take_share_token_denom(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.share_token_denom, ::std::string::String::new())
    }

    // string module_account = 4;


    pub fn get_module_account(&self) -> &str {
        &self.module_account
    }
    pub fn clear_module_account(&mut self) {
        self.module_account.clear();
    }

    // Param is passed by value, moved
    pub fn set_module_account(&mut self, v: ::std::string::String) {
        self.module_account = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_module_account(&mut self) -> &mut ::std::string::String {
        &mut self.module_account
    }

    // Take field
    pub fn take_module_account(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.module_account, ::std::string::String::new())
    }

    // string validator = 5;


    pub fn get_validator(&self) -> &str {
        &self.validator
    }
    pub fn clear_validator(&mut self) {
        self.validator.clear();
    }

    // Param is passed by value, moved
    pub fn set_validator(&mut self, v: ::std::string::String) {
        self.validator = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_validator(&mut self) -> &mut ::std::string::String {
        &mut self.validator
    }

    // Take field
    pub fn take_validator(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.validator, ::std::string::String::new())
    }
}

impl ::protobuf::Message for TokenizeShareRecord {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.id = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.owner)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.share_token_denom)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.module_account)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.validator)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.id, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.owner.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.owner);
        }
        if !self.share_token_denom.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.share_token_denom);
        }
        if !self.module_account.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.module_account);
        }
        if !self.validator.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.validator);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.id != 0 {
            os.write_uint64(1, self.id)?;
        }
        if !self.owner.is_empty() {
            os.write_string(2, &self.owner)?;
        }
        if !self.share_token_denom.is_empty() {
            os.write_string(3, &self.share_token_denom)?;
        }
        if !self.module_account.is_empty() {
            os.write_string(4, &self.module_account)?;
        }
        if !self.validator.is_empty() {
            os.write_string(5, &self.validator)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TokenizeShareRecord {
        TokenizeShareRecord::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "id",
                |m: &TokenizeShareRecord| { &m.id },
                |m: &mut TokenizeShareRecord| { &mut m.id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "owner",
                |m: &TokenizeShareRecord| { &m.owner },
                |m: &mut TokenizeShareRecord| { &mut m.owner },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "share_token_denom",
                |m: &TokenizeShareRecord| { &m.share_token_denom },
                |m: &mut TokenizeShareRecord| { &mut m.share_token_denom },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "module_account",
                |m: &TokenizeShareRecord| { &m.module_account },
                |m: &mut TokenizeShareRecord| { &mut m.module_account },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "validator",
                |m: &TokenizeShareRecord| { &m.validator },
                |m: &mut TokenizeShareRecord| { &mut m.validator },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<TokenizeShareRecord>(
                "TokenizeShareRecord",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static TokenizeShareRecord {
        static instance: ::protobuf::rt::LazyV2<TokenizeShareRecord> = ::protobuf::rt::LazyV2::INIT;
        instance.get(TokenizeShareRecord::new)
    }
}

impl ::protobuf::Clear for TokenizeShareRecord {
    fn clear(&mut self) {
        self.id = 0;
        self.owner.clear();
        self.share_token_denom.clear();
        self.module_account.clear();
        self.validator.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TokenizeShareRecord {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TokenizeShareRecord {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct QueryTokenizeShareRecordByDenomRequest {
    // message fields
    pub denom: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a QueryTokenizeShareRecordByDenomRequest {
    fn default() -> &'a QueryTokenizeShareRecordByDenomRequest {
        <QueryTokenizeShareRecordByDenomRequest as ::protobuf::Message>::default_instance()
    }
}

impl QueryTokenizeShareRecordByDenomRequest {
    pub fn new() -> QueryTokenizeShareRecordByDenomRequest {
        ::std::default::Default::default()
    }

    // string denom = 1;


    pub fn get_denom(&self) -> &str {
        &self.denom
    }
    pub fn clear_denom(&mut self) {
        self.denom.clear();
    }

    // Param is passed by value, moved
    pub fn set_denom(&mut self, v: ::std::string::String) {
        self.denom = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_denom(&mut self) -> &mut ::std::string::String {
        &mut self.denom
    }

    // Take field
    pub fn take_denom(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.denom, ::std::string::String::new())
    }
}

impl ::protobuf::Message for QueryTokenizeShareRecordByDenomRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.denom)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.denom.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.denom);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.denom.is_empty() {
            os.write_string(1, &self.denom)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> QueryTokenizeShareRecordByDenomRequest {
        QueryTokenizeShareRecordByDenomRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "denom",
                |m: &QueryTokenizeShareRecordByDenomRequest| { &m.denom },
                |m: &mut QueryTokenizeShareRecordByDenomRequest| { &mut m.denom },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<QueryTokenizeShareRecordByDenomRequest>(
                "QueryTokenizeShareRecordByDenomRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static QueryTokenizeShareRecordByDenomRequest {
        static instance: ::protobuf::rt::LazyV2<QueryTokenizeShareRecordByDenomRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(QueryTokenizeShareRecordByDenomRequest::new)
    }
}

impl ::protobuf::Clear for QueryTokenizeShareRecordByDenomRequest {
    fn clear(&mut self) {
        self.denom.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for QueryTokenizeShareRecordByDenomRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryTokenizeShareRecordByDenomRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct QueryTokenizeShareRecordByDenomResponse {
    // message fields
    pub record: ::protobuf::SingularPtrField<TokenizeShareRecord>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a QueryTokenizeShareRecordByDenomResponse {
    fn default() -> &'a QueryTokenizeShareRecordByDenomResponse {
        <QueryTokenizeShareRecordByDenomResponse as ::protobuf::Message>::default_instance()
    }
}

impl QueryTokenizeShareRecordByDenomResponse {
    pub fn new() -> QueryTokenizeShareRecordByDenomResponse {
        ::std::default::Default::default()
    }

    // .TokenizeShareRecord record = 1;


    pub fn get_record(&self) -> &TokenizeShareRecord {
        self.record.as_ref().unwrap_or_else(|| <TokenizeShareRecord as ::protobuf::Message>::default_instance())
    }
    pub fn clear_record(&mut self) {
        self.record.clear();
    }

    pub fn has_record(&self) -> bool {
        self.record.is_some()
    }

    // Param is passed by value, moved
    pub fn set_record(&mut self, v: TokenizeShareRecord) {
        self.record = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_record(&mut self) -> &mut TokenizeShareRecord {
        if self.record.is_none() {
            self.record.set_default();
        }
        self.record.as_mut().unwrap()
    }

    // Take field
    pub fn take_record(&mut self) -> TokenizeShareRecord {
        self.record.take().unwrap_or_else(|| TokenizeShareRecord::new())
    }
}

impl ::protobuf::Message for QueryTokenizeShareRecordByDenomResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.record {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.record)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.record.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.record.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> QueryTokenizeShareRecordByDenomResponse {
        QueryTokenizeShareRecordByDenomResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<TokenizeShareRecord>>(
                "record",
                |m: &QueryTokenizeShareRecordByDenomResponse| { &m.record },
                |m: &mut QueryTokenizeShareRecordByDenomResponse| { &mut m.record },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<QueryTokenizeShareRecordByDenomResponse>(
                "QueryTokenizeShareRecordByDenomResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static QueryTokenizeShareRecordByDenomResponse {
        static instance: ::protobuf::rt::LazyV2<QueryTokenizeShareRecordByDenomResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(QueryTokenizeShareRecordByDenomResponse::new)
    }
}

impl ::protobuf::Clear for QueryTokenizeShareRecordByDenomResponse {
    fn clear(&mut self) {
        self.record.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for QueryTokenizeShareRecordByDenomResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryTokenizeShareRecordByDenomResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Coin {
    // message fields
    pub denom: ::std::string::String,
    pub amount: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Coin {
    fn default() -> &'a Coin {
        <Coin as ::protobuf::Message>::default_instance()
    }
}

impl Coin {
    pub fn new() -> Coin {
        ::std::default::Default::default()
    }

    // string denom = 1;


    pub fn get_denom(&self) -> &str {
        &self.denom
    }
    pub fn clear_denom(&mut self) {
        self.denom.clear();
    }

    // Param is passed by value, moved
    pub fn set_denom(&mut self, v: ::std::string::String) {
        self.denom = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_denom(&mut self) -> &mut ::std::string::String {
        &mut self.denom
    }

    // Take field
    pub fn take_denom(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.denom, ::std::string::String::new())
    }

    // string amount = 2;


    pub fn get_amount(&self) -> &str {
        &self.amount
    }
    pub fn clear_amount(&mut self) {
        self.amount.clear();
    }

    // Param is passed by value, moved
    pub fn set_amount(&mut self, v: ::std::string::String) {
        self.amount = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_amount(&mut self) -> &mut ::std::string::String {
        &mut self.amount
    }

    // Take field
    pub fn take_amount(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.amount, ::std::string::String::new())
    }
}

impl ::protobuf::Message for Coin {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.denom)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.amount)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.denom.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.denom);
        }
        if !self.amount.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.amount);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.denom.is_empty() {
            os.write_string(1, &self.denom)?;
        }
        if !self.amount.is_empty() {
            os.write_string(2, &self.amount)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Coin {
        Coin::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "denom",
                |m: &Coin| { &m.denom },
                |m: &mut Coin| { &mut m.denom },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "amount",
                |m: &Coin| { &m.amount },
                |m: &mut Coin| { &mut m.amount },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Coin>(
                "Coin",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Coin {
        static instance: ::protobuf::rt::LazyV2<Coin> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Coin::new)
    }
}

impl ::protobuf::Clear for Coin {
    fn clear(&mut self) {
        self.denom.clear();
        self.amount.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Coin {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Coin {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct MsgRedeemTokensforShares {
    // message fields
    pub delegator_address: ::std::string::String,
    pub amount: ::protobuf::SingularPtrField<Coin>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MsgRedeemTokensforShares {
    fn default() -> &'a MsgRedeemTokensforShares {
        <MsgRedeemTokensforShares as ::protobuf::Message>::default_instance()
    }
}

impl MsgRedeemTokensforShares {
    pub fn new() -> MsgRedeemTokensforShares {
        ::std::default::Default::default()
    }

    // string delegator_address = 1;


    pub fn get_delegator_address(&self) -> &str {
        &self.delegator_address
    }
    pub fn clear_delegator_address(&mut self) {
        self.delegator_address.clear();
    }

    // Param is passed by value, moved
    pub fn set_delegator_address(&mut self, v: ::std::string::String) {
        self.delegator_address = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_delegator_address(&mut self) -> &mut ::std::string::String {
        &mut self.delegator_address
    }

    // Take field
    pub fn take_delegator_address(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.delegator_address, ::std::string::String::new())
    }

    // .Coin amount = 2;


    pub fn get_amount(&self) -> &Coin {
        self.amount.as_ref().unwrap_or_else(|| <Coin as ::protobuf::Message>::default_instance())
    }
    pub fn clear_amount(&mut self) {
        self.amount.clear();
    }

    pub fn has_amount(&self) -> bool {
        self.amount.is_some()
    }

    // Param is passed by value, moved
    pub fn set_amount(&mut self, v: Coin) {
        self.amount = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_amount(&mut self) -> &mut Coin {
        if self.amount.is_none() {
            self.amount.set_default();
        }
        self.amount.as_mut().unwrap()
    }

    // Take field
    pub fn take_amount(&mut self) -> Coin {
        self.amount.take().unwrap_or_else(|| Coin::new())
    }
}

impl ::protobuf::Message for MsgRedeemTokensforShares {
    fn is_initialized(&self) -> bool {
        for v in &self.amount {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.delegator_address)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.amount)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.delegator_address.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.delegator_address);
        }
        if let Some(ref v) = self.amount.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.delegator_address.is_empty() {
            os.write_string(1, &self.delegator_address)?;
        }
        if let Some(ref v) = self.amount.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MsgRedeemTokensforShares {
        MsgRedeemTokensforShares::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "delegator_address",
                |m: &MsgRedeemTokensforShares| { &m.delegator_address },
                |m: &mut MsgRedeemTokensforShares| { &mut m.delegator_address },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Coin>>(
                "amount",
                |m: &MsgRedeemTokensforShares| { &m.amount },
                |m: &mut MsgRedeemTokensforShares| { &mut m.amount },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<MsgRedeemTokensforShares>(
                "MsgRedeemTokensforShares",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static MsgRedeemTokensforShares {
        static instance: ::protobuf::rt::LazyV2<MsgRedeemTokensforShares> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MsgRedeemTokensforShares::new)
    }
}

impl ::protobuf::Clear for MsgRedeemTokensforShares {
    fn clear(&mut self) {
        self.delegator_address.clear();
        self.amount.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MsgRedeemTokensforShares {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgRedeemTokensforShares {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct MsgRedeemTokensforSharesResponse {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MsgRedeemTokensforSharesResponse {
    fn default() -> &'a MsgRedeemTokensforSharesResponse {
        <MsgRedeemTokensforSharesResponse as ::protobuf::Message>::default_instance()
    }
}

impl MsgRedeemTokensforSharesResponse {
    pub fn new() -> MsgRedeemTokensforSharesResponse {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for MsgRedeemTokensforSharesResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MsgRedeemTokensforSharesResponse {
        MsgRedeemTokensforSharesResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<MsgRedeemTokensforSharesResponse>(
                "MsgRedeemTokensforSharesResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static MsgRedeemTokensforSharesResponse {
        static instance: ::protobuf::rt::LazyV2<MsgRedeemTokensforSharesResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MsgRedeemTokensforSharesResponse::new)
    }
}

impl ::protobuf::Clear for MsgRedeemTokensforSharesResponse {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MsgRedeemTokensforSharesResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgRedeemTokensforSharesResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1btokenize_share_record.proto\"\xac\x01\n\x13TokenizeShareRecord\x12\
    \x0e\n\x02id\x18\x01\x20\x01(\x04R\x02id\x12\x14\n\x05owner\x18\x02\x20\
    \x01(\tR\x05owner\x12*\n\x11share_token_denom\x18\x03\x20\x01(\tR\x0fsha\
    reTokenDenom\x12%\n\x0emodule_account\x18\x04\x20\x01(\tR\rmoduleAccount\
    \x12\x1c\n\tvalidator\x18\x05\x20\x01(\tR\tvalidator\">\n&QueryTokenizeS\
    hareRecordByDenomRequest\x12\x14\n\x05denom\x18\x01\x20\x01(\tR\x05denom\
    \"W\n'QueryTokenizeShareRecordByDenomResponse\x12,\n\x06record\x18\x01\
    \x20\x01(\x0b2\x14.TokenizeShareRecordR\x06record\"4\n\x04Coin\x12\x14\n\
    \x05denom\x18\x01\x20\x01(\tR\x05denom\x12\x16\n\x06amount\x18\x02\x20\
    \x01(\tR\x06amount\"f\n\x18MsgRedeemTokensforShares\x12+\n\x11delegator_\
    address\x18\x01\x20\x01(\tR\x10delegatorAddress\x12\x1d\n\x06amount\x18\
    \x02\x20\x01(\x0b2\x05.CoinR\x06amount\"\"\n\x20MsgRedeemTokensforShares\
    ResponseJ\xe8\x06\n\x06\x12\x04\0\0\x1b+\n\x08\n\x01\x0c\x12\x03\0\0\x12\
    \n\n\n\x02\x04\0\x12\x04\x02\0\x08\x01\n\n\n\x03\x04\0\x01\x12\x03\x02\
    \x08\x1b\n\x0b\n\x04\x04\0\x02\0\x12\x03\x03\x02\x10\n\x0c\n\x05\x04\0\
    \x02\0\x05\x12\x03\x03\x02\x08\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x03\t\
    \x0b\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x03\x0e\x0f\n\x0b\n\x04\x04\0\
    \x02\x01\x12\x03\x04\x02\x13\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03\x04\
    \x02\x08\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\x04\t\x0e\n\x0c\n\x05\x04\
    \0\x02\x01\x03\x12\x03\x04\x11\x12\n\x0b\n\x04\x04\0\x02\x02\x12\x03\x05\
    \x02\x1f\n\x0c\n\x05\x04\0\x02\x02\x05\x12\x03\x05\x02\x08\n\x0c\n\x05\
    \x04\0\x02\x02\x01\x12\x03\x05\t\x1a\n\x0c\n\x05\x04\0\x02\x02\x03\x12\
    \x03\x05\x1d\x1e\n8\n\x04\x04\0\x02\x03\x12\x03\x06\x02\x1c\"+\x20module\
    \x20account\x20take\x20the\x20role\x20of\x20delegator\n\n\x0c\n\x05\x04\
    \0\x02\x03\x05\x12\x03\x06\x02\x08\n\x0c\n\x05\x04\0\x02\x03\x01\x12\x03\
    \x06\t\x17\n\x0c\n\x05\x04\0\x02\x03\x03\x12\x03\x06\x1a\x1b\nH\n\x04\
    \x04\0\x02\x04\x12\x03\x07\x02\x17\";\x20validator\x20delegated\x20to\
    \x20for\x20tokenize\x20share\x20record\x20creation\n\n\x0c\n\x05\x04\0\
    \x02\x04\x05\x12\x03\x07\x02\x08\n\x0c\n\x05\x04\0\x02\x04\x01\x12\x03\
    \x07\t\x12\n\x0c\n\x05\x04\0\x02\x04\x03\x12\x03\x07\x15\x16\n\n\n\x02\
    \x04\x01\x12\x04\n\0\x0c\x01\n\n\n\x03\x04\x01\x01\x12\x03\n\x08.\n\x0b\
    \n\x04\x04\x01\x02\0\x12\x03\x0b\x02\x13\n\x0c\n\x05\x04\x01\x02\0\x05\
    \x12\x03\x0b\x02\x08\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03\x0b\t\x0e\n\
    \x0c\n\x05\x04\x01\x02\0\x03\x12\x03\x0b\x11\x12\n\n\n\x02\x04\x02\x12\
    \x04\r\0\x0f\x01\n\n\n\x03\x04\x02\x01\x12\x03\r\x08/\n\x0b\n\x04\x04\
    \x02\x02\0\x12\x03\x0e\x02!\n\x0c\n\x05\x04\x02\x02\0\x06\x12\x03\x0e\
    \x02\x15\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03\x0e\x16\x1c\n\x0c\n\x05\
    \x04\x02\x02\0\x03\x12\x03\x0e\x1f\x20\n\n\n\x02\x04\x03\x12\x04\x11\0\
    \x14\x01\n\n\n\x03\x04\x03\x01\x12\x03\x11\x08\x0c\n\x0b\n\x04\x04\x03\
    \x02\0\x12\x03\x12\x02\x14\n\x0c\n\x05\x04\x03\x02\0\x05\x12\x03\x12\x02\
    \x08\n\x0c\n\x05\x04\x03\x02\0\x01\x12\x03\x12\t\x0e\n\x0c\n\x05\x04\x03\
    \x02\0\x03\x12\x03\x12\x12\x13\n\x0b\n\x04\x04\x03\x02\x01\x12\x03\x13\
    \x02\x14\n\x0c\n\x05\x04\x03\x02\x01\x05\x12\x03\x13\x02\x08\n\x0c\n\x05\
    \x04\x03\x02\x01\x01\x12\x03\x13\t\x0f\n\x0c\n\x05\x04\x03\x02\x01\x03\
    \x12\x03\x13\x12\x13\n\n\n\x02\x04\x04\x12\x04\x16\0\x19\x01\n\n\n\x03\
    \x04\x04\x01\x12\x03\x16\x08\x20\n\x0b\n\x04\x04\x04\x02\0\x12\x03\x17\
    \x02\x1f\n\x0c\n\x05\x04\x04\x02\0\x05\x12\x03\x17\x02\x08\n\x0c\n\x05\
    \x04\x04\x02\0\x01\x12\x03\x17\t\x1a\n\x0c\n\x05\x04\x04\x02\0\x03\x12\
    \x03\x17\x1d\x1e\n\x0b\n\x04\x04\x04\x02\x01\x12\x03\x18\x02\x12\n\x0c\n\
    \x05\x04\x04\x02\x01\x06\x12\x03\x18\x02\x06\n\x0c\n\x05\x04\x04\x02\x01\
    \x01\x12\x03\x18\x07\r\n\x0c\n\x05\x04\x04\x02\x01\x03\x12\x03\x18\x10\
    \x11\n\t\n\x02\x04\x05\x12\x03\x1b\0+\n\n\n\x03\x04\x05\x01\x12\x03\x1b\
    \x08(b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
