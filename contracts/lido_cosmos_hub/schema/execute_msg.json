{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ExecuteMsg",
  "anyOf": [
    {
      "description": "Owner's operations Set the owener",
      "type": "object",
      "required": [
        "update_config"
      ],
      "properties": {
        "update_config": {
          "type": "object",
          "properties": {
            "owner": {
              "type": [
                "string",
                "null"
              ]
            },
            "rewards_dispatcher_contract": {
              "type": [
                "string",
                "null"
              ]
            },
            "statom_token_contract": {
              "type": [
                "string",
                "null"
              ]
            },
            "validators_registry_contract": {
              "type": [
                "string",
                "null"
              ]
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "update the parameters that is needed for the contract",
      "type": "object",
      "required": [
        "update_params"
      ],
      "properties": {
        "update_params": {
          "type": "object",
          "required": [
            "max_burn_ratio"
          ],
          "properties": {
            "max_burn_ratio": {
              "$ref": "#/definitions/Decimal"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Pauses the contracts for the given amount of blocks. Only the owner or allowed guardians can pause the contracts",
      "type": "object",
      "required": [
        "pause_contracts"
      ],
      "properties": {
        "pause_contracts": {
          "type": "object",
          "required": [
            "duration"
          ],
          "properties": {
            "duration": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Unpauses the contracts. Only the owner allowed to unpause the contracts",
      "type": "object",
      "required": [
        "unpause_contracts"
      ],
      "properties": {
        "unpause_contracts": {
          "type": "object"
        }
      },
      "additionalProperties": false
    },
    {
      "description": "User's operations Receives `amount` in underlying coin denom from sender. Delegate `amount` equally between validators from the registry. Issue `amount` / exchange_rate for the user.",
      "type": "object",
      "required": [
        "bond_for_st_atom"
      ],
      "properties": {
        "bond_for_st_atom": {
          "type": "object"
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "bond_rewards"
      ],
      "properties": {
        "bond_rewards": {
          "type": "object"
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Dispatch Rewards",
      "type": "object",
      "required": [
        "dispatch_rewards"
      ],
      "properties": {
        "dispatch_rewards": {
          "type": "object"
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Check whether the slashing has happened or not",
      "type": "object",
      "required": [
        "check_slashing"
      ],
      "properties": {
        "check_slashing": {
          "type": "object"
        }
      },
      "additionalProperties": false
    },
    {
      "description": "bAsset's operations Receive interface for send token. Unbond the underlying coin denom. Burn the received basset token.",
      "type": "object",
      "required": [
        "receive"
      ],
      "properties": {
        "receive": {
          "$ref": "#/definitions/Cw20ReceiveMsg"
        }
      },
      "additionalProperties": false
    },
    {
      "description": "internal operations",
      "type": "object",
      "required": [
        "redelegate_proxy"
      ],
      "properties": {
        "redelegate_proxy": {
          "type": "object",
          "required": [
            "redelegations",
            "src_validator"
          ],
          "properties": {
            "redelegations": {
              "type": "array",
              "items": {
                "type": "array",
                "items": [
                  {
                    "type": "string"
                  },
                  {
                    "$ref": "#/definitions/Coin"
                  }
                ],
                "maxItems": 2,
                "minItems": 2
              }
            },
            "src_validator": {
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Adds a list of addresses to a whitelist of guardians which can pause (but not unpause) the contracts",
      "type": "object",
      "required": [
        "add_guardians"
      ],
      "properties": {
        "add_guardians": {
          "type": "object",
          "required": [
            "addresses"
          ],
          "properties": {
            "addresses": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Removes a list of a addresses from a whitelist of guardians which can pause (but not unpause) the contracts",
      "type": "object",
      "required": [
        "remove_guardians"
      ],
      "properties": {
        "remove_guardians": {
          "type": "object",
          "required": [
            "addresses"
          ],
          "properties": {
            "addresses": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "receive_tokenized_share"
      ],
      "properties": {
        "receive_tokenized_share": {
          "type": "object"
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "Binary": {
      "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>",
      "type": "string"
    },
    "Coin": {
      "type": "object",
      "required": [
        "amount",
        "denom"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "denom": {
          "type": "string"
        }
      }
    },
    "Cw20ReceiveMsg": {
      "description": "Cw20ReceiveMsg should be de/serialized under `Receive()` variant in a ExecuteMsg",
      "type": "object",
      "required": [
        "amount",
        "msg",
        "sender"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "msg": {
          "$ref": "#/definitions/Binary"
        },
        "sender": {
          "type": "string"
        }
      }
    },
    "Decimal": {
      "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
      "type": "string"
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
